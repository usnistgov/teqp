name: cibuildwheel

on:
  # workflow_dispatch:
  pull_request:
  push:
  release:
    types:
      - published
      - edited
      - released

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-13, macos-14]

    steps:
      - uses: actions/checkout@v5
      - name: checkout submodules
        run: git submodule update --init --recursive

      # Used to host cibuildwheel
      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install cibuildwheel and other dependencies
        run: python -m pip install cibuildwheel==2.22.0 build wheel setuptools twine

      # - name: Install LLVM (clang-cl) on windows
      #   run: choco install -y llvm
      #   if: runner.os == 'Windows'

      - name: Build sdist
        run: pipx run build --sdist --outdir wheelhouse
        if: runner.os == 'Windows'

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          CIBW_ARCHS: auto64
          # CIBW_ARCHS_MACOS: "universal2"
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=11.0 CMAKE_BUILD_PARALLEL_LEVEL='1'
          CIBW_TEST_COMMAND: python -c "import teqp"
          CIBW_ENVIRONMENT_LINUX: CXXFLAGS='-fconcepts' CMAKE_BUILD_PARALLEL_LEVEL='1'
          CIBW_ENVIRONMENT_WINDOW: CMAKE_BUILD_PARALLEL_LEVEL='1'
          CIBW_BUILD_VERBOSITY_WINDOWS: 2
          CIBW_SKIP: "*pypy* *pp* *cp36* *cp37* *cp38* *musl*"

      - name: Check wheels
        run: python -m twine check wheelhouse/*.whl

      - name: Upload Files
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: |
            ./wheelhouse/*.whl
            ./wheelhouse/*.tar.gz

  merge_wheels:
   runs-on: ubuntu-latest
   needs: build_wheels
   steps:
     - name: Merge Artifacts
       uses: actions/upload-artifact/merge@v4
       with:
         name: dist
         pattern: dist-*

  testpypi-publish:
    name: Upload to TestPyPI
    needs: [merge_wheels]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist

    - run: |
        set -x
        ls -R
        du -sh

    - uses: pypa/gh-action-pypi-publish@release/v1.13
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TESTPYPI_TOKEN }}
        skip-existing: true

  pypi-publish:
    name: Upload to PyPI if release
    needs: [merge_wheels]
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    # Run if release and either published or edited actions are fired
    if: github.event_name == 'release' && contains(fromJSON('["published", "edited"]'), github.event.action)

    steps:
    - uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist

    - name: Display structure of downloaded files
      run: |
        set -x
        ls -R
        du -sh

    - uses: pypa/gh-action-pypi-publish@release/v1.13
      with:
        password: ${{ secrets.PYPI_TOKEN }}
        skip-existing: false
